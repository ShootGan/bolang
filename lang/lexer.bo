module lexer

imports ../std/io
imports ../std/strings

type TokSym String
type TokInt i64

type Token {null, TokSym, TokInt}


fn parseKeyword(word String, str String) (:Token, :String)
    let i = 0
    while i < len(word)
        if i >= len(str)
            return (null, str)
        if i >= len(word)
            return ( Token(&TokSym(str[..i])), str[i..] )
        i = i + 1




fn parseLet(str String) (:Token, :String)
    let s = String("let")
    let t = &TokSym(s)

    if isPrefix(s, str)
        return ( Token(t), str[len(s)..] )

    return (Token(t), str)
