module lexer

imports ../std/io
imports ../std/strings

type TokSym String
type TokInt i64

type Token {null, TokSym, TokInt}


fn parseKeyword(word String, str String) (:Token, :String)
    let i = 0
    while true
        if i >= len(word)
            return (Token(&TokSym(str[..i])), str[i..])
        if i >= len(str)
            return (Token(null), str)
        if word[i] != str[i]
            return (Token(null), str)
        i = i + 1
