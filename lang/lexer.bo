module lexer

imports ../std/io
imports ../std/strings
imports ../std/chars

type Token {
    null
    TokOp      string
    TokInt     i64
    TokSym     char
    TokIdent   string
    TokString  string
    TokChar    char
    TokKeyword string
}

let keywords  = ["let", "while", "fn", "extern", "true", "false", "null", "if", "else", "return", "module", "imports", "append"]
let types     = ["i8", "i16", "i32", "i64", "char", "bool", "string"]
let operators = ["+", "-", "*", "/", "%", "=", "+=", "-=", "*=", "/=", "%=", "..", "<", ">", "<=", ">=", "&&", "||", "=="]
let symbols   = ['(', ')', '[', ']', '{', '}', ':', ';', '.', ',']

fn lexChar(str string) (Token, string)
    switch str
        ['\'', '\\', 'n', '\'' .. rest]  ; return (TokChar('\n'), rest)
        ['\'', '\\', '0', '\'' .. rest]  ; return (TokChar('\0'), rest)
        ['\'', '\\', 't', '\'' .. rest]  ; return (TokChar('\t'), rest)
        ['\'', '\\', '\\', '\'' .. rest] ; return (TokChar('\\'), rest)
        ['\'', '\n', '\'' .. rest]       ; return (null, str)
        ['\'', '\t', '\'' .. rest]       ; return (null, str)
        ['\'', c, '\'' .. rest]          ; return (TokChar(c), rest)
        _                                ; return (null, str)


fn lexString(str string) (Token, string)
    switch str
        ['"' .. s];
        _         ; return (null, str)

    let s = ""
    let ss = str[1..]

    while true
        switch ss
            ['\n' .. rest]
                return (null, str)
            ['\\', 'n' .. rest]
                s = append(s, "\n")
                ss = rest
            ['\\', '0' .. rest]
                s = append(s, "\0")
                ss = rest
            ['\\', 't' .. rest]
                s = append(s, "\t")
                ss = rest
            ['"' .. rest]
                return (TokString(s), rest)
            [c .. rest]
                s = append(s, [c])
                ss = rest


fn lexSymbol(str string) (Token, string)
    switch str
        [c .. s]
            let i = 0
            while i < len(symbols)
                if c == symbols[i]
                    return (TokSym(c), s)
                i = i + 1
        _;

    return (null, str)


fn lexKeyword(str string) (Token, string)
    let (i, k) = (0, 0)

    while i < len(str) && isAlpha(str[i])
        i = i + 1

    let word = str[..i]
    while k < len(keywords)
        if strEqual(word, keywords[k])
            return (TokKeyword(word), str[i..])
        k = k + 1

    return (null, str)

fn lexDigits(str string) (Token, string)
    let i = 0

    switch str[i..]
        [c ..] | isDigit(c); i = i + 1
        _; 
 
    switch strReadInt(str[..i])
        i64(n) ; return (TokInt(n), str[i..])
        _      ; return (null, str)


fn lexIdent(str string) (Token, string)
    let i = 0

    switch str
        [c ..] | isAlpha(c);
        _                  ; return (null, str)

    while true
        switch str[i..]
            [c ..] | isAlpha(c) || isDigit(c) ; i = i + 1
            _                                 ; return (TokIdent(str[..i]), str[i..])


fn lexOperator(str string) (Token, string)
    let (i, j, max) = (0, 0, 0)

    while i < len(operators)
        if isPrefix(operators[i], str) && len(operators[i]) > max
            max = len(operators[i])
            j = i
        i = i + 1
    
    switch max
        0; return (null, str)
        n; return (TokOp(operators[j]),  str[n..])


fn lexWhite(str string) string
    let i = 0

    while true
        switch str[i..]
            [' '  ..];
            ['\t' ..];
            ['\n' ..];
            _        ; return str[..i]
        i = i + 1


fn lexToken(str string) (Token, string)
    switch lexWhite(str)
        s | len(s) > 0; return lexToken(str[len(s)..])
        _             ;

    switch lexKeyword(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexString(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexChar(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexIdent(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexOperator(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexDigits(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    switch lexSymbol(str)
        (null, _) ;
        (tok, ss) ; return (tok, ss)

    return (null, str)
